# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lily_pb2 as lily__pb2


class ExcelStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Parse = channel.unary_unary(
                '/palm.lily.v1.Excel/Parse',
                request_serializer=lily__pb2.S3File.SerializeToString,
                response_deserializer=lily__pb2.ExcelModel.FromString,
                )
        self.Generate = channel.unary_unary(
                '/palm.lily.v1.Excel/Generate',
                request_serializer=lily__pb2.ExcelModel.SerializeToString,
                response_deserializer=lily__pb2.S3File.FromString,
                )


class ExcelServicer(object):
    """----------------------------------------------------------------------------

    """

    def Parse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Generate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExcelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Parse': grpc.unary_unary_rpc_method_handler(
                    servicer.Parse,
                    request_deserializer=lily__pb2.S3File.FromString,
                    response_serializer=lily__pb2.ExcelModel.SerializeToString,
            ),
            'Generate': grpc.unary_unary_rpc_method_handler(
                    servicer.Generate,
                    request_deserializer=lily__pb2.ExcelModel.FromString,
                    response_serializer=lily__pb2.S3File.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.lily.v1.Excel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Excel(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def Parse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Excel/Parse',
            lily__pb2.S3File.SerializeToString,
            lily__pb2.ExcelModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Generate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Excel/Generate',
            lily__pb2.ExcelModel.SerializeToString,
            lily__pb2.S3File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class S3Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFile = channel.unary_unary(
                '/palm.lily.v1.S3/GetFile',
                request_serializer=lily__pb2.S3GetFileRequest.SerializeToString,
                response_deserializer=lily__pb2.S3GetFileResponse.FromString,
                )


class S3Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_S3Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=lily__pb2.S3GetFileRequest.FromString,
                    response_serializer=lily__pb2.S3GetFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.lily.v1.S3', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class S3(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.S3/GetFile',
            lily__pb2.S3GetFileRequest.SerializeToString,
            lily__pb2.S3GetFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TexStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ToPdf = channel.unary_unary(
                '/palm.lily.v1.Tex/ToPdf',
                request_serializer=lily__pb2.TexToRequest.SerializeToString,
                response_deserializer=lily__pb2.S3File.FromString,
                )
        self.ToWord = channel.unary_unary(
                '/palm.lily.v1.Tex/ToWord',
                request_serializer=lily__pb2.TexToRequest.SerializeToString,
                response_deserializer=lily__pb2.S3File.FromString,
                )


class TexServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ToPdf(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ToWord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TexServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ToPdf': grpc.unary_unary_rpc_method_handler(
                    servicer.ToPdf,
                    request_deserializer=lily__pb2.TexToRequest.FromString,
                    response_serializer=lily__pb2.S3File.SerializeToString,
            ),
            'ToWord': grpc.unary_unary_rpc_method_handler(
                    servicer.ToWord,
                    request_deserializer=lily__pb2.TexToRequest.FromString,
                    response_serializer=lily__pb2.S3File.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.lily.v1.Tex', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tex(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ToPdf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Tex/ToPdf',
            lily__pb2.TexToRequest.SerializeToString,
            lily__pb2.S3File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ToWord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Tex/ToWord',
            lily__pb2.TexToRequest.SerializeToString,
            lily__pb2.S3File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EpubStub(object):
    """----------------------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Build = channel.unary_unary(
                '/palm.lily.v1.Epub/Build',
                request_serializer=lily__pb2.EpubBuildRequest.SerializeToString,
                response_deserializer=lily__pb2.S3File.FromString,
                )


class EpubServicer(object):
    """----------------------------------------------------------------------------

    """

    def Build(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EpubServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Build': grpc.unary_unary_rpc_method_handler(
                    servicer.Build,
                    request_deserializer=lily__pb2.EpubBuildRequest.FromString,
                    response_serializer=lily__pb2.S3File.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'palm.lily.v1.Epub', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Epub(object):
    """----------------------------------------------------------------------------

    """

    @staticmethod
    def Build(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/palm.lily.v1.Epub/Build',
            lily__pb2.EpubBuildRequest.SerializeToString,
            lily__pb2.S3File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
