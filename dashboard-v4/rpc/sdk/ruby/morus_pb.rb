# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: morus.proto

require 'google/protobuf'


descriptor_data = "\n\x0bmorus.proto\x12\rmint.morus.v1\":\n\x15MarkdownToHtmlRequest\x12\x0f\n\x07payload\x18\x01 \x01(\t\x12\x10\n\x08sanitize\x18\x02 \x01(\x08\")\n\x16MarkdownToHtmlResponse\x12\x0f\n\x07payload\x18\x01 \x01(\t2c\n\x08Markdown\x12W\n\x06ToHtml\x12$.mint.morus.v1.MarkdownToHtmlRequest\x1a%.mint.morus.v1.MarkdownToHtmlResponse\"\x00\x42\x32\n.com.github.iapt_platform.mint.plugins.morus.v1P\x01\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Mint
  module Morus
    module V1
      MarkdownToHtmlRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mint.morus.v1.MarkdownToHtmlRequest").msgclass
      MarkdownToHtmlResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("mint.morus.v1.MarkdownToHtmlResponse").msgclass
    end
  end
end
