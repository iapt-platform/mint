<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: lily.proto

namespace Palm\Lily\V1;

use UnexpectedValueException;

/**
 * https://owl.purdue.edu/owl/general_writing/general_writing_faqs.html
 *
 * Protobuf type <code>palm.lily.v1.Style</code>
 */
class Style
{
    /**
     * https://apastyle.apa.org/
     * https://owl.purdue.edu/owl/research_and_citation/apa_style/apa_formatting_and_style_guide/general_format.html
     * https://www.ilc.cuhk.edu.hk/Chinese/APAMLA/APA/APAlayout.aspx
     *
     * Generated from protobuf enum <code>APA_7 = 0;</code>
     */
    const APA_7 = 0;
    /**
     * https://www.mla.org/MLA-Style
     * https://owl.purdue.edu/owl/research_and_citation/mla_style/mla_formatting_and_style_guide/mla_formatting_and_style_guide.html#:~:text=MLA%20(Modern%20Language%20Association)%20style,the%20liberal%20arts%20and%20humanities.
     *
     * Generated from protobuf enum <code>MLA_8 = 10;</code>
     */
    const MLA_8 = 10;
    /**
     * https://www.chicagomanualofstyle.org/home.html
     * https://owl.purdue.edu/owl/research_and_citation/chicago_manual_17th_edition/cmos_formatting_and_style_guide/chicago_manual_of_style_17th_edition.html
     *
     * Generated from protobuf enum <code>CMOS = 20;</code>
     */
    const CMOS = 20;

    private static $valueToName = [
        self::APA_7 => 'APA_7',
        self::MLA_8 => 'MLA_8',
        self::CMOS => 'CMOS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

